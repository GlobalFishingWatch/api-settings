steps:
  # Run tests
  - name: 'gcr.io/cloud-builders/docker'
    args:
      [
        'build',
        '--target',
        'development',
        '-t',
        'gfw/api-settings:development',
        '.',
      ]
  - name: 'gcr.io/cloud-builders/docker'
    args: ['run', 'gfw/api-settings:development', 'npm', 'test']

  # Push production image to GCR
  - name: 'gcr.io/cloud-builders/docker'
    args:
      [
        'build',
        '--target',
        'production',
        '-t',
        'gcr.io/world-fishing-827/github.com/globalfishingwatch/api-settings:$COMMIT_SHA',
        '.',
      ]
  - name: 'gcr.io/cloud-builders/docker'
    args:
      [
        'push',
        'gcr.io/world-fishing-827/github.com/globalfishingwatch/api-settings:$COMMIT_SHA',
      ]

  # Deploy to the appropriate environment
  - name: 'gcr.io/cloud-builders/gcloud'
    args:
      [
        'beta',
        'run',
        'deploy',
        '$_RUN_SERVICE_NAME',
        '--project',
        '$_RUN_PROJECT',
        '--image',
        'gcr.io/world-fishing-827/github.com/globalfishingwatch/api-settings:$COMMIT_SHA',
        '--region',
        '$_RUN_REGION',
        '--platform',
        'managed',
        '--set-env-vars',
        'GFW_APP_TOKEN=$_GFW_APP_TOKEN,HOSTd=$_HOST,GCLOUD_DATASTORE_NAMESPACEd=$_GCLOUD_DATASTORE_NAMESPACE,GCLOUD_DATASTORE_PROJECTIDd=$_GCLOUD_DATASTORE_PROJECTID,API_PELAGOS_SERVERd=$_API_PELAGOS_SERVER,API_PELAGOS_OPENAPId=$_API_PELAGOS_OPENAPI,API_VESSELS_SERVERd=$_API_VESSELS_SERVER,API_VESSELS_OPENAPId=$_API_VESSELS_OPENAPI,API_EVENTS_SERVERd=$_API_EVENTS_SERVER,API_EVENTS_OPENAPId=$_API_EVENTS_OPENAPI,API_AUTH_SERVERd=$_API_AUTH_SERVER,API_AUTH_OPENAPId=$_API_AUTH_OPENAPI,API_SETTINGS_SERVERd=$_API_SETTINGS_SERVER,API_SETTINGS_OPENAPId=$_API_SETTINGS_OPENAPI',
      ]

images:
  - 'gcr.io/world-fishing-827/github.com/globalfishingwatch/api-settings:$COMMIT_SHA'
